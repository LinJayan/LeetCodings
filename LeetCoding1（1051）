# 题目描述（简单）-高度检查器：
学校在拍年度纪念照时，一般要求学生按照 非递减 的高度顺序排列。
请你返回能让所有学生以 非递减 高度排列的最小必要移动人数。
注意，当一组学生被选中时，他们之间可以以任何可能的方式重新排序，而未被选中的学生应该保持不动。

示例1：
输入：heights = [1,1,4,2,1,3]
输出：3 
解释：
当前数组：[1,1,4,2,1,3]
目标数组：[1,1,1,2,3,4]
在下标 2 处（从 0 开始计数）出现 4 vs 1 ，所以我们必须移动这名学生。
在下标 4 处（从 0 开始计数）出现 1 vs 3 ，所以我们必须移动这名学生。
在下标 5 处（从 0 开始计数）出现 3 vs 4 ，所以我们必须移动这名学生。

示例 2：
输入：heights = [5,1,2,3,4]
输出：5

示例 3：
输入：heights = [1,2,3,4,5]
输出：0


提示：
	1 <= heights.length <= 100
	1 <= heights[i] <= 100

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/height-checker
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

#代码
class Solution {
public:
    int heightChecker(vector<int>& heights) {
        int len=heights.size();
        int *tmp=new int[len];
        for(int i=0;i<len;i++){
            tmp[i]=heights[i];
        }
        int *movelist=new int[len];
        for(int i=0;i<len;i++){
            movelist[i]=tmp[i];
        }
        for(int i=0;i<len-1;i++){ //比较的次数
            int flag=1;
            for(int j=0;j<len-i-1;j++){ //每比较一次就前进一步
                if(tmp[j]>tmp[j+1]){
                    swap(tmp[j],tmp[j+1]);
                    flag=0;
                }
            }
            if(flag) break;
        }
        
        int count=0;
        for(int i=0;i<len;i++){
            if(tmp[i]!=movelist[i]){
                count++;
            }
        }
        return count;
    }
    
};

#总结
1.对题目一定要理解，题中描述的输出是需要移动的人的个数，而不是次数（这是容易出错的地方）
2.解题思路：借鉴别人的解法，采用先排序，然后排序后的数组与原来的数组进行比较位置，不相等的元素就是需要移动的。
